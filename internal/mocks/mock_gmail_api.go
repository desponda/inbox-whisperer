// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/gmail_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	gomock "github.com/golang/mock/gomock"
	gmail "google.golang.org/api/gmail/v1"
)

// MockGmailAPI is a mock of GmailAPI interface.
type MockGmailAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGmailAPIMockRecorder
}

// MockGmailAPIMockRecorder is the mock recorder for MockGmailAPI.
type MockGmailAPIMockRecorder struct {
	mock *MockGmailAPI
}

// NewMockGmailAPI creates a new mock instance.
func NewMockGmailAPI(ctrl *gomock.Controller) *MockGmailAPI {
	mock := &MockGmailAPI{ctrl: ctrl}
	mock.recorder = &MockGmailAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGmailAPI) EXPECT() *MockGmailAPIMockRecorder {
	return m.recorder
}

// UsersMessagesGet mocks base method.
func (m *MockGmailAPI) UsersMessagesGet(userID, msgID string) interface{ Do(context.Context) (*gmail.Message, error) } {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersMessagesGet", userID, msgID)
	ret0, _ := ret[0].(*MockUsersMessagesGetCall)
	return ret0
}

// UsersMessagesGet indicates an expected call of UsersMessagesGet.
func (mr *MockGmailAPIMockRecorder) UsersMessagesGet(userID, msgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersMessagesGet", reflect.TypeOf((*MockGmailAPI)(nil).UsersMessagesGet), userID, msgID)
}

// MockUsersMessagesGetCall is a mock of UsersMessagesGetCall interface.
type MockUsersMessagesGetCall struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMessagesGetCallMockRecorder
}

// MockUsersMessagesGetCallMockRecorder is the mock recorder for MockUsersMessagesGetCall.
type MockUsersMessagesGetCallMockRecorder struct {
	mock *MockUsersMessagesGetCall
}

// NewMockUsersMessagesGetCall creates a new mock instance.
func NewMockUsersMessagesGetCall(ctrl *gomock.Controller) *MockUsersMessagesGetCall {
	mock := &MockUsersMessagesGetCall{ctrl: ctrl}
	mock.recorder = &MockUsersMessagesGetCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersMessagesGetCall) EXPECT() *MockUsersMessagesGetCallMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockUsersMessagesGetCall) Do(ctx context.Context) (*gmail.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx)
	ret0, _ := ret[0].(*gmail.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockUsersMessagesGetCallMockRecorder) Do(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUsersMessagesGetCall)(nil).Do), ctx)
}
