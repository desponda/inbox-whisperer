/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Inbox Whisperer API
 * OpenAPI specification for the Inbox Whisperer backend API.
This spec is always kept in sync with implemented endpoints.

 * OpenAPI spec version: 0.1.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type { User, UserCreateRequest, UserUpdateRequest } from '../inboxWhispererAPI.schemas';

export const getUser = () => {
  /**
   * Only admin can list users. Non-admins receive 403 Forbidden.
   * @summary List users
   */
  const getApiUsers = <TData = AxiosResponse<User[]>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/api/users`, options);
  };
  /**
   * Only admin can create users. Non-admins receive 403 Forbidden.
   * @summary Create a user
   */
  const postApiUsers = <TData = AxiosResponse<User>>(
    userCreateRequest: UserCreateRequest,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.post(`/api/users`, userCreateRequest, options);
  };
  /**
   * Returns the currently authenticated user.
   * @summary Get current user
   */
  const getApiUsersMe = <TData = AxiosResponse<User>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/api/users/me`, options);
  };
  /**
   * Only the user themselves (or admin) can get this user. Others receive 403 Forbidden.
   * @summary Get user by ID
   */
  const getApiUsersId = <TData = AxiosResponse<User>>(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/api/users/${id}`, options);
  };
  /**
   * Only the user themselves (or admin) can update this user. Others receive 403 Forbidden.
   * @summary Update user
   */
  const putApiUsersId = <TData = AxiosResponse<User>>(
    id: string,
    userUpdateRequest: UserUpdateRequest,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.put(`/api/users/${id}`, userUpdateRequest, options);
  };
  /**
   * Only the user themselves (or admin) can delete this user. Others receive 403 Forbidden.
   * @summary Delete user
   */
  const deleteApiUsersId = <TData = AxiosResponse<void>>(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.delete(`/api/users/${id}`, options);
  };
  return {
    getApiUsers,
    postApiUsers,
    getApiUsersMe,
    getApiUsersId,
    putApiUsersId,
    deleteApiUsersId,
  };
};
export type GetApiUsersResult = AxiosResponse<User[]>;
export type PostApiUsersResult = AxiosResponse<User>;
export type GetApiUsersMeResult = AxiosResponse<User>;
export type GetApiUsersIdResult = AxiosResponse<User>;
export type PutApiUsersIdResult = AxiosResponse<User>;
export type DeleteApiUsersIdResult = AxiosResponse<void>;
