openapi: 3.0.3
info:
  title: Inbox Whisperer API
  version: 0.1.0
  description: >
    OpenAPI specification for the Inbox Whisperer backend API.
    This spec will be expanded as endpoints are implemented.
servers:
  - url: http://localhost:8080
paths:
  /api/gmail/fetch:
    get:
      summary: Fetch user's emails from Gmail
      description: Fetches the latest emails for the authenticated user from Gmail and returns a list of email summaries.
      responses:
        '200':
          description: List of email summaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmailSummary'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/gmail/messages/{id}:
    get:
      summary: Get full email content
      description: Returns the full content of a specific email by ID for the authenticated user.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailContent'
        '404':
          description: Email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /healthz:
    get:
      summary: Health check
      description: Returns 200 OK if the server is running
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: ok

  /users:
    get:
      summary: List users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          example: user@example.com
        created_at:
          type: string
          format: date-time
          example: 2023-01-01T12:00:00Z
    UserCreateRequest:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
      required:
        - email
    UserUpdateRequest:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
      required:
        - email
    EmailSummary:
      type: object
      properties:
        id:
          type: string
          example: 1789a2b1cdefg
        subject:
          type: string
          example: "Welcome to Inbox Whisperer!"
        from:
          type: string
          example: "notifications@example.com"
        snippet:
          type: string
          example: "This is a preview of your email..."
        date:
          type: string
          format: date-time
          example: 2025-04-22T00:00:00Z
    EmailContent:
      type: object
      properties:
        id:
          type: string
          example: 1789a2b1cdefg
        subject:
          type: string
          example: "Welcome to Inbox Whisperer!"
        from:
          type: string
          example: "notifications@example.com"
        to:
          type: string
          example: "user@example.com"
        date:
          type: string
          format: date-time
          example: 2025-04-22T00:00:00Z
        body:
          type: string
          example: "Hello and welcome..."
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: User not found
